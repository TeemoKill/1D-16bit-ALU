/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module autotest_5 (
    input clk,
    input rst,
    input mode_switch,
    input error_switch,
    output reg [15:0] out,
    output reg [23:0] leds
  );
  
  
  
  reg tester_reset;
  
  localparam CLKSPEED = 5'h16;
  
  reg [21:0] M_counter_d, M_counter_q = 1'h0;
  
  reg [23:0] M_led_d, M_led_q = 1'h0;
  
  reg [0:0] M_pass_condition_d, M_pass_condition_q = 1'h0;
  
  wire [16-1:0] M_alu_out;
  wire [1-1:0] M_alu_z;
  wire [1-1:0] M_alu_v;
  wire [1-1:0] M_alu_n;
  reg [16-1:0] M_alu_a;
  reg [16-1:0] M_alu_b;
  reg [6-1:0] M_alu_alufn;
  alu16bit_3 alu (
    .a(M_alu_a),
    .b(M_alu_b),
    .alufn(M_alu_alufn),
    .out(M_alu_out),
    .z(M_alu_z),
    .v(M_alu_v),
    .n(M_alu_n)
  );
  
  wire [1-1:0] M_testButton_out;
  button_conditioner_15 testButton (
    .clk(clk),
    .in(mode_switch),
    .out(M_testButton_out)
  );
  
  wire [1-1:0] M_tester_sig_out;
  edge_detector_18 tester_sig (
    .clk(clk),
    .in(M_testButton_out),
    .out(M_tester_sig_out)
  );
  
  localparam START_state = 5'd0;
  localparam ADD_state = 5'd1;
  localparam ADD_OVR_state = 5'd2;
  localparam SUB_state = 5'd3;
  localparam SUB_OVR_state = 5'd4;
  localparam AND_state = 5'd5;
  localparam NAND_state = 5'd6;
  localparam OR_state = 5'd7;
  localparam NOR_state = 5'd8;
  localparam XOR_state = 5'd9;
  localparam XNOR_state = 5'd10;
  localparam A_state = 5'd11;
  localparam SHL_state = 5'd12;
  localparam SHR_state = 5'd13;
  localparam SRA_state = 5'd14;
  localparam CMPEQ_state = 5'd15;
  localparam CMPLT_state = 5'd16;
  localparam CMPLE_state = 5'd17;
  localparam MULTIPLY_state = 5'd18;
  localparam ADDN_state = 5'd19;
  localparam SUBN_state = 5'd20;
  localparam DIV_state = 5'd21;
  localparam MOD_state = 5'd22;
  localparam PASS_state = 5'd23;
  localparam FAIL_state = 5'd24;
  
  reg [4:0] M_state_d, M_state_q = START_state;
  
  localparam OADD = 6'h00;
  
  localparam OSUB = 6'h01;
  
  localparam OAND = 6'h18;
  
  localparam ONAND = 6'h17;
  
  localparam OOR = 6'h1e;
  
  localparam ONOR = 6'h11;
  
  localparam OXOR = 6'h16;
  
  localparam ONXOR = 6'h19;
  
  localparam OA = 6'h1a;
  
  localparam OCMPEQ = 6'h33;
  
  localparam OCMPLT = 6'h35;
  
  localparam OCMPLE = 6'h37;
  
  localparam OSHL = 6'h20;
  
  localparam OSHR = 6'h21;
  
  localparam OSRA = 6'h23;
  
  localparam OMUL = 6'h02;
  
  localparam ODIV = 6'h03;
  
  localparam OMOD = 6'h07;
  
  always @* begin
    M_state_d = M_state_q;
    M_pass_condition_d = M_pass_condition_q;
    M_led_d = M_led_q;
    M_counter_d = M_counter_q;
    
    tester_reset = M_tester_sig_out | rst;
    M_counter_d = M_counter_q + 1'h1;
    leds = M_led_q;
    leds[16+7+0-:1] = M_testButton_out;
    
    case (M_state_q)
      START_state: begin
        M_alu_alufn = 1'h0;
        out = 16'h0000;
        M_alu_a = 1'h0;
        M_alu_b = 1'h0;
        if (M_counter_q[21+0-:1] && M_testButton_out) begin
          M_pass_condition_d = 1'h1;
          M_state_d = ADD_state;
        end
      end
      ADD_state: begin
        M_alu_alufn = 6'h00;
        M_alu_a = 16'h0003;
        M_alu_b = 16'h0004;
        out = 16'hee01;
        if (M_alu_out == 16'h0007) begin
          M_led_d[0+0+0-:1] = 1'h1;
        end else begin
          M_pass_condition_d = 1'h0;
        end
        if (M_counter_q[21+0-:1]) begin
          M_state_d = ADD_OVR_state;
        end
      end
      ADD_OVR_state: begin
        M_alu_alufn = 6'h00;
        M_alu_a = 16'h4000;
        M_alu_b = 16'h4000;
        out = 16'hee02;
        if (M_alu_v == 1'h1) begin
          M_led_d[0+1+0-:1] = 1'h1;
        end else begin
          M_pass_condition_d = 1'h0;
        end
        if (M_counter_q[21+0-:1]) begin
          M_state_d = SUB_state;
        end
      end
      SUB_state: begin
        M_alu_alufn = 6'h01;
        M_alu_a = 16'h0004;
        M_alu_b = 16'h0003;
        out = 16'hee03;
        if (M_alu_out == 16'h0001) begin
          M_led_d[0+2+0-:1] = 1'h1;
        end else begin
          M_pass_condition_d = 1'h0;
        end
        if (M_counter_q[21+0-:1]) begin
          M_state_d = SUB_OVR_state;
        end
      end
      SUB_OVR_state: begin
        M_alu_alufn = 6'h01;
        M_alu_a = 16'hbfff;
        M_alu_b = 16'h4000;
        out = 16'hee04;
        if (M_alu_out == 16'h7fff) begin
          M_led_d[0+3+0-:1] = 1'h1;
        end else begin
          M_pass_condition_d = 1'h0;
        end
        if (M_counter_q[21+0-:1]) begin
          M_state_d = AND_state;
        end
      end
      AND_state: begin
        M_alu_alufn = 6'h18;
        M_alu_a = 16'h0001;
        M_alu_b = 16'h0001;
        out = 16'hee05;
        if (M_alu_out == 16'h0001) begin
          M_led_d[0+4+0-:1] = 1'h1;
        end else begin
          M_pass_condition_d = 1'h0;
        end
        if (M_counter_q[21+0-:1]) begin
          M_state_d = NAND_state;
        end
      end
      NAND_state: begin
        M_alu_alufn = 6'h17;
        M_alu_a = 16'h0003;
        M_alu_b = 16'h0005;
        out = 16'hee06;
        if (M_alu_out == 16'hfffe) begin
          M_led_d[0+5+0-:1] = 1'h1;
        end else begin
          M_pass_condition_d = 1'h0;
        end
        if (M_counter_q[21+0-:1]) begin
          M_state_d = OR_state;
        end
      end
      OR_state: begin
        M_alu_alufn = 6'h1e;
        M_alu_a = 16'h000a;
        M_alu_b = 16'h000f;
        out = 16'hee07;
        if (M_alu_out == 16'h000f) begin
          M_led_d[0+6+0-:1] = 1'h1;
        end else begin
          M_pass_condition_d = 1'h0;
        end
        if (M_counter_q[21+0-:1]) begin
          M_state_d = NOR_state;
        end
      end
      NOR_state: begin
        M_alu_alufn = 6'h11;
        M_alu_a = 16'h0003;
        M_alu_b = 16'h0005;
        out = 16'hee08;
        if (M_alu_out == 16'hfff8) begin
          M_led_d[0+7+0-:1] = 1'h1;
        end else begin
          M_pass_condition_d = 1'h0;
        end
        if (M_counter_q[21+0-:1]) begin
          M_state_d = XOR_state;
        end
      end
      XOR_state: begin
        M_alu_alufn = 6'h16;
        M_alu_a = 16'h000a;
        M_alu_b = 16'h000c;
        out = 16'hee09;
        if (M_alu_out == 16'h0006) begin
          M_led_d[8+0+0-:1] = 1'h1;
        end else begin
          M_pass_condition_d = 1'h0;
        end
        if (M_counter_q[21+0-:1]) begin
          M_state_d = XNOR_state;
        end
      end
      XNOR_state: begin
        M_alu_alufn = 6'h19;
        M_alu_a = 16'h000a;
        M_alu_b = 16'h000c;
        out = 16'hee10;
        if (M_alu_out == 16'hfff9) begin
          M_led_d[8+1+0-:1] = 1'h1;
        end else begin
          M_pass_condition_d = 1'h0;
        end
        if (M_counter_q[21+0-:1]) begin
          M_state_d = A_state;
        end
      end
      A_state: begin
        M_alu_alufn = 6'h1a;
        M_alu_a = 16'h0003;
        M_alu_b = 16'h0004;
        out = 16'hee11;
        if (M_alu_out == 16'h0003) begin
          M_led_d[8+2+0-:1] = 1'h1;
        end else begin
          M_pass_condition_d = 1'h0;
        end
        if (M_counter_q[21+0-:1]) begin
          M_state_d = CMPEQ_state;
        end
      end
      CMPEQ_state: begin
        M_alu_alufn = 6'h33;
        M_alu_a = 16'h0003;
        M_alu_b = 16'h0003;
        out = 16'hee12;
        if (M_alu_out == 1'h1) begin
          M_led_d[8+3+0-:1] = 1'h1;
        end else begin
          M_pass_condition_d = 1'h0;
        end
        if (M_counter_q[21+0-:1]) begin
          M_state_d = CMPLT_state;
        end
      end
      CMPLT_state: begin
        M_alu_alufn = 6'h35;
        M_alu_a = 16'h000a;
        M_alu_b = 16'h000a;
        out = 16'hee13;
        if (M_alu_out == 1'h0) begin
          M_led_d[8+4+0-:1] = 1'h1;
        end else begin
          M_pass_condition_d = 1'h0;
        end
        if (M_counter_q[21+0-:1]) begin
          M_state_d = CMPLE_state;
        end
      end
      CMPLE_state: begin
        M_alu_alufn = 6'h37;
        M_alu_a = 16'h000a;
        M_alu_b = 16'h000a;
        out = 16'hee14;
        if (M_alu_out == 1'h1) begin
          M_led_d[8+5+0-:1] = 1'h1;
        end else begin
          M_pass_condition_d = 1'h0;
        end
        if (M_counter_q[21+0-:1]) begin
          M_state_d = SHL_state;
        end
      end
      SHL_state: begin
        M_alu_alufn = 6'h20;
        M_alu_a = 16'h000a;
        M_alu_b = 16'h0003;
        out = 16'hee15;
        if (M_alu_out == 16'h0050) begin
          M_led_d[8+6+0-:1] = 1'h1;
        end else begin
          M_pass_condition_d = 1'h0;
        end
        if (M_counter_q[21+0-:1]) begin
          M_state_d = SHR_state;
        end
      end
      SHR_state: begin
        M_alu_alufn = 6'h21;
        M_alu_a = 16'h0050;
        M_alu_b = 16'h0003;
        out = 16'hee16;
        if (M_alu_out == 16'h000a) begin
          M_led_d[8+7+0-:1] = 1'h1;
        end else begin
          M_pass_condition_d = 1'h0;
        end
        if (M_counter_q[21+0-:1]) begin
          M_state_d = SRA_state;
        end
      end
      SRA_state: begin
        M_alu_alufn = 6'h23;
        M_alu_a = 16'h8008;
        M_alu_b = 16'h0003;
        out = 16'hee17;
        if (M_alu_out == 16'hf001) begin
          M_led_d[16+0+0-:1] = 1'h1;
        end else begin
          M_pass_condition_d = 1'h0;
        end
        if (M_counter_q[21+0-:1]) begin
          M_state_d = MULTIPLY_state;
        end
      end
      MULTIPLY_state: begin
        M_alu_alufn = 6'h02;
        M_alu_a = 16'h0003;
        M_alu_b = 16'h0004;
        out = 16'hee18;
        if (M_alu_out == 16'h000c) begin
          M_led_d[16+1+0-:1] = 1'h1;
        end else begin
          M_pass_condition_d = 1'h0;
        end
        if (M_counter_q[21+0-:1]) begin
          M_state_d = ADDN_state;
        end
      end
      ADDN_state: begin
        M_alu_alufn = 6'h00;
        M_alu_a = 16'hffff;
        M_alu_b = 16'hffff;
        out = 16'hee19;
        if (M_alu_out == 16'hfffe) begin
          M_led_d[16+2+0-:1] = 1'h1;
        end else begin
          M_pass_condition_d = 1'h0;
        end
        if (M_counter_q[21+0-:1]) begin
          M_state_d = SUBN_state;
        end
      end
      SUBN_state: begin
        M_alu_alufn = 6'h01;
        M_alu_a = 16'hffff;
        M_alu_b = 16'hffff;
        out = 16'hee20;
        if (M_alu_out == 16'h0000) begin
          M_led_d[16+3+0-:1] = 1'h1;
        end else begin
          M_pass_condition_d = 1'h0;
        end
        if (M_counter_q[21+0-:1]) begin
          M_state_d = DIV_state;
        end
      end
      DIV_state: begin
        M_alu_alufn = 6'h03;
        M_alu_a = 16'h0004;
        M_alu_b = 16'h0003;
        out = 16'hee21;
        if (M_alu_out == 16'h0001) begin
          M_led_d[16+4+0-:1] = 1'h1;
        end else begin
          M_pass_condition_d = 1'h0;
        end
        if (M_counter_q[21+0-:1]) begin
          M_state_d = MOD_state;
        end
      end
      MOD_state: begin
        M_alu_alufn = 6'h07;
        M_alu_a = 16'h0004;
        M_alu_b = 16'h0003;
        out = 16'hee21;
        if (M_alu_out == 16'h0001) begin
          M_led_d[16+5+0-:1] = 1'h1;
        end else begin
          M_pass_condition_d = 1'h0;
        end
        if (M_counter_q[21+0-:1]) begin
          if (M_pass_condition_q) begin
            M_state_d = PASS_state;
          end else begin
            M_state_d = FAIL_state;
          end
        end
      end
      PASS_state: begin
        out = 16'hab55;
        M_alu_a = 1'h0;
        M_alu_b = 1'h0;
        M_alu_alufn = 1'h0;
        if (tester_reset == 1'h1) begin
          M_state_d = ADD_state;
        end
      end
      FAIL_state: begin
        out = 16'hcb1d;
        M_alu_a = 1'h0;
        M_alu_b = 1'h0;
        M_alu_alufn = 1'h0;
        if (tester_reset == 1'h1) begin
          M_state_d = ADD_state;
        end
      end
      default: begin
        M_state_d = START_state;
        out = 16'h0000;
        M_alu_a = 1'h0;
        M_alu_b = 1'h0;
        M_alu_alufn = 1'h0;
      end
    endcase
    if (M_counter_q[21+0-:1] == 1'h1) begin
      M_counter_d[21+0-:1] = 1'h0;
    end
    if (error_switch) begin
      M_alu_alufn[0+0-:1] = 1'h1;
    end
  end
  
  always @(posedge clk) begin
    if (tester_reset == 1'b1) begin
      M_led_q <= 1'h0;
    end else begin
      M_led_q <= M_led_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (tester_reset == 1'b1) begin
      M_state_q <= 1'h0;
    end else begin
      M_state_q <= M_state_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (tester_reset == 1'b1) begin
      M_pass_condition_q <= 1'h0;
    end else begin
      M_pass_condition_q <= M_pass_condition_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (tester_reset == 1'b1) begin
      M_counter_q <= 1'h0;
    end else begin
      M_counter_q <= M_counter_d;
    end
  end
  
endmodule
