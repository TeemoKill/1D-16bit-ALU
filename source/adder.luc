module adder (
    input a[16],  // INPUT OF A
    input b[16],  // INPUT OF B
    input alufn[6], // select functions
    output sum[16], // 
    output z, //  get z
    output v, // get v
    output n, // get n
    output compareZ, // z for comparason
    output compareV, // v for comparason
    output compareN  // n for comparason
  ) {

  sig temporary[16]; //  temporary value for zvn
  sig compare[16];   //  signal for comparason

  always {
    case(alufn[2:0]) // using the alufn0 value to choose OPCODE
    {
      b000:
        temporary = a + b; // OPCODE 000000 do addition

      b001:
        temporary= a - b;  // OPCODE 000001 do subtraction

      b010:
        temporary = a * b;    //OPCODE 000010 do multiplication
        
      b011:
        temporary = a / b;  // OPCODE 000011 do division

      b111:
        temporary = a-(a/b*b);    //OPCODE 000111, do modulo

      default:
        temporary = a + b; // default to addition
    }
    compare = a - b;

    v = (a[15]&b[15]&(~temporary[15]))|
    ((~a[15])&(~b[15])&temporary[15]);
    // calculate v

    n = temporary[15]; // calculate n

    z = ~|temporary; // calculate z

    sum = temporary; // output the s
    
    compareZ = ~|compare;
    
    compareV = (a[15]&b[15]&(~compare[15]))|
    ((~a[15])&(~b[15])&compare[15]);
    
    compareN = compare[15];
  }
}