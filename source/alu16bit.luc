module alu16bit (
    input a[16],  // input a
    input b[16],  // input b
    input alufn[6], // control code alufn

    output out[16], // output
    output z, // z
    output v, // v
    output n  // n
  ) {

  // instantiate module 4 BASIC FUNCTIONSS
    adder add;
    boolean boole;
    comparator comp;
    shiftbit shift;

  always {
    // values for input (a b OPCODE)
    add.a = a;
    add.b = b;
    add.alufn = alufn;

    boole.a = a;
    boole.b = b;
    boole.alufn = alufn;

    comp.alufn = alufn;
    comp.z = add.compareZ;
    comp.v = add.compareV;
    comp.n = add.compareN;

    shift.alufn = alufn;
    shift.a = a;
    shift.b = b;



    case(alufn[5:4])
      {
        b00: // adder
          out = add.sum;
        b01: // boolean
          out = boole.boole;
        b10: //shift
          out = shift.shift;
        b11: //comparator
           out = comp.comp;
        default:
          out = 0; // set default to 0
        }
     z = add.z; // z from adder
     v = add.v; // v from adder
     n = add.n; // n from adder
}
}